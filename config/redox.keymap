/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        htnr: behavior_hold_tap_no_rep {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&kpnr>, <&kp>;
        };

        hrml: hrml {
            compatible = "zmk,behavior-hold-tap";
            label = "home row mod left";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            require-prior-idle-ms = <180>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <60 46 47 61 62 48 49 63 65 33 19 6 20 50 20 21 23 34 35 36 37 7 8 9 10 11 21 22 23 24 25 35 36 37 38 39 51 52 53 54 55 65 66 67 68 69 6 7 8 9 10 11 19 20 21 22 23 24 25 33 34 35 36 37 38 39 49 50 51 52 53 54 55 63 65 66 67 68 69 64>;
        };

        hrmr: hrmr {
            compatible = "zmk,behavior-hold-tap";
            label = "home row mod right";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <220>;
            require-prior-idle-ms = <180>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 18 26 27 28 29 30 31 32 40 41 42 43 44 45 46 47 56 57 58 59 60 61 62 49 48 63 64 65>;
        };

        skqr: skqr {
            compatible = "zmk,behavior-sticky-key";
            label = "sticky key quick-release";
            bindings = <&kp>;
            #binding-cells = <1>;
            release-after-ms = <500>;
            quick-release;
            ignore-modifiers;
        };

        htsk: htsk {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold-tap sticky key";
            bindings = <&kp>, <&skqr>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
        };

        sshift_tap: sshift_tap {
            compatible = "zmk,behavior-mod-morph";
            label = "Smart shift tap";
            bindings = <&skqr LSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        smart_shift: smart_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "Smart shift";
            bindings = <&kp>, <&sshift_tap>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "hold-preferred";
        };
    };

    macros {
        kpnr: macro_kpnr {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "kp no repeat";
        };

        clear_state: clear_state {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &kp F24>;
            label = "CLEAR_STATE";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_return {
            bindings = <&kp RET>;
            key-positions = <42 43>;
            layers = <0 1 4 5>;
        };

        combo_c_return {
            bindings = <&kp LC(RET)>;
            key-positions = <42 43 44>;
            layers = <0 1 4 5>;
        };

        combo_esc {
            bindings = <&kp ESC>;
            key-positions = <53 52>;
            layers = <0 1 4 5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp ESC    &kp N1         &kp N2        &kp N3         &kp N4        &kp N5                                                                           &kp N6  &kp N7        &kp N8             &kp N9           &kp N0                 &kp MINUS
&kp TAB    &kp Q          &kp W         &kp E          &kp R         &kp T   &kp DELETE                                         &htnr C_NEXT C_PP     &kp Y   &kp U         &kp I              &kp O            &htnr EQUAL SEMICOLON  &kp BSPC
&kp LCTRL  &hrml LSHFT A  &hrml LALT S  &hrml LCTRL D  &hrml LGUI F  &kp G   &kp BACKSPACE                                      &kp EQUAL             &kp H   &hrmr RGUI J  &hrmr RCTRL K      &hrmr LALT L     &hrmr RSHFT P          &kp SQT
&kp LSHFT  &kp Z          &kp X         &kp C          &kp V         &kp B   &lt 8 PG_UP    &kp PG_DN         &kp LEFT_BRACKET  &lt 8 RBKT            &kp N   &kp M         &htnr UNDER COMMA  &htnr MINUS DOT  &htnr EXCL SLASH       &mt LSHFT RET
&kp LCTRL  &kp LEFT_GUI   &kp LEFT_ALT  &kp RALT       &mo 2                 &lt 5 SPACE    &htnr END HOME    &key_repeat       &smart_shift LSHFT 0          &mo 4         &kp LEFT           &kp DOWN         &kp UP                 &kp RIGHT
            >;

            label = "Base";
        };

        left_symbol_base_layer {
            bindings = <
&trans  &kp F1         &kp F2  &kp F3            &kp F4          &kp F5                                                                 &kp F6     &kp F7     &kp F8      &kp F9     &kp F10        &kp UNDER
&trans  &kp PLUS       &kp N7  &htnr ASTRK N8    &htnr LPAR N9   &kp EQUAL        &kp F11                                 &kp F12       &kp CARET  &kp AMPS   &kp LBRC    &kp RBRC   &kp BACKSLASH  &trans
&trans  &htnr RPAR N0  &kp N4  &htnr PERCENT N5  &htnr CARET N6  &htnr COMMA DOT  &trans                                  &kp PLUS      &kp ASTRK  &kp UNDER  &kp LPAR    &kp RPAR   &kp COLON      &kp DQT
&trans  &kp MINUS      &kp N1  &kp N2            &kp N3          &kp FSLH         &kp C_PREV  &kp C_NEXT    &kp C_VOL_DN  &kp C_VOL_UP  &kp LT     &kp GT     &kp LBKT    &kp RBKT   &kp QMARK      &trans
&trans  &trans         &trans  &trans            &trans                           &trans      &kp C_PP      &kp K_MUTE    &trans                   &mo 3      &kp INSERT  &kp PSCRN  &trans         &trans
            >;

            label = "SymL0";
        };

        left_symbol_entry_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans    &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;

            label = "SymL1";
        };

        left_symbol_hold_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans    &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;

            label = "SymL2";
        };

        right_symbol_layer {
            bindings = <
&trans  &kp F1         &kp F2    &kp F3     &kp F4       &kp F5                                                              &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &kp EXCL       &kp AT    &kp POUND  &kp DOLLAR   &kp GRAVE  &kp F11                                 &kp F12          &trans  &trans  &trans  &trans  &trans   &trans
&trans  &kp PIPE       &kp PLUS  &kp EQUAL  &kp MINUS    &kp TILDE  &trans                                  &trans           &trans  &trans  &trans  &trans  &trans   &trans
&trans  &kp BACKSLASH  &kp LT    &kp GT     &kp PERCENT  &kp QMARK  &kp C_PREV  &kp C_NEXT    &kp C_VOL_DN  &kp C_VOLUME_UP  &trans  &trans  &trans  &trans  &trans   &trans
&trans  &trans         &trans    &trans     &trans                  &trans      &kp C_PP      &kp K_MUTE    &trans                   &trans  &trans  &trans  &trans   &trans
            >;

            label = "SymR";
        };

        navigation_layer {
            bindings = <
&trans  &trans     &trans     &trans     &trans     &trans                                       &trans     &trans       &trans           &trans       &trans         &trans
&trans  &trans     &trans     &trans     &trans     &trans     &trans                    &trans  &kp LC(Y)  &kp PERCENT  &kp LBRC         &kp RBRC     &kp DEL        &trans
&trans  &kp LSHFT  &kp LALT   &kp LCTRL  &kp LGUI   &kp SPACE  &trans                    &trans  &kp LEFT   &kp DOWN     &kp UP           &kp RIGHT    &htnr RET TAB  &trans
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &trans     &trans  &trans    &trans  &trans  &kp HOME   &kp LC(TAB)  &kp LC(LS(TAB))  &kp END      &kp LC(Z)      &trans
&trans  &trans     &trans     &trans     &trans                &trans  &trans    &trans  &trans             &kp SPACE    &kp PAGE_DOWN    &kp PAGE_UP  &trans         &trans
            >;

            label = "Nav";
        };

        left_gaming_layer {
            bindings = <
&trans  &trans     &trans  &trans  &trans     &trans                                             &trans  &trans  &trans     &trans   &trans    &trans
&trans  &kp TAB    &kp Q   &kp W   &kp E      &kp R   &kp N6                          &trans     &trans  &trans  &trans     &trans   &trans    &trans
&trans  &kp LSHFT  &kp A   &kp S   &kp D      &kp F   &kp T                           &kp EQUAL  &trans  &kp J   &kp K      &kp L    &kp P     &trans
&trans  &kp LALT   &kp Z   &kp X   &kp C      &kp V   &kp G      &kp B        &trans  &trans     &trans  &trans  &kp COMMA  &kp DOT  &kp FSLH  &kp ENTER
&to 0   &trans     &trans  &trans  &kp ENTER          &kp SPACE  &kp LCTRL    &trans  &kp LSHFT          &trans  &trans     &trans   &trans    &trans
            >;

            label = "GameL";
        };

        right_gaming_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                                             &trans  &trans    &trans     &trans     &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans     &trans  &trans    &kp UP     &trans     &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                          &kp EQUAL  &trans  &kp LEFT  &kp DOWN   &kp RIGHT  &kp P     &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans       &trans  &trans     &trans  &trans    &kp COMMA  &kp DOT    &kp FSLH  &kp ENTER
&to 0   &trans  &trans  &trans  &trans          &kp SPACE  &kp LCTRL    &trans  &kp LSHFT          &trans    &trans     &trans     &trans    &trans
            >;

            label = "GameR";
        };

        config_layer {
            bindings = <
&out OUT_TOG  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                                      &none   &none  &none       &none  &none      &none
&none         &none         &none           &none         &none         &none         &bt BT_CLR                              &none       &none   &none  &kp INSERT  &none  &none      &none
&none         &none         &kp SCROLLLOCK  &none         &none         &tog 6        &sys_reset                              &sys_reset  &tog 7  &none  &none       &none  &kp PSCRN  &none
&none         &to 0         &none           &kp CAPS      &none         &none         &none       &bootloader    &bootloader  &none       &none   &none  &none       &none  &none      &none
&none         &none         &none           &none         &none                       &none       &none          &none        &kp RALT            &none  &none       &none  &none      &none
            >;

            label = "Conf";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        SymL_entry {
            if-layers = <2>;
            then-layer = <1>;
        };

        SymL_hold {
            if-layers = <3>;
            then-layer = <1>;
        };

        SymL_SymR {
            if-layers = <4>;
            then-layer = <1>;
        };
    };
};
